// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`snapshots should successfully render jsdoc.all: # checkbox

## events

| Name       | Description                                        | Arguments                                  |
| ---------- | -------------------------------------------------- | ------------------------------------------ |
| \`created\`  | Emitted the event \`created\` when loaded Multilign  | **\`status\`**: *any* — The finishing status |
| \`finished\` | Emitted the event \`finished\` when loaded Multilign | **\`status\`**: *any* — The finishing status |

## methods

### set()

Set the checkbox ID

**Syntax**

\`\`\`ts
set(id: string, name?: string, order: number = 1, values?: string | string[]): boolean
\`\`\`

**Parameters**

- **\`id\`**<br>
  The checkbox ID

- **\`name\`**<br>
  The checkbox name

- **\`order\`**<br>
  The checkbox order

- **\`values\`**<br>
  The checkbox values

- **\`...rest\`**<br>
  The rest options

**Return value**

True on success; ortherwise false

 1`] = `
"# checkbox

## events

| Name       | Description                                        | Arguments                                  |
| ---------- | -------------------------------------------------- | ------------------------------------------ |
| \`created\`  | Emitted the event \`created\` when loaded Multilign  | **\`status\`**: *any* — The finishing status |
| \`finished\` | Emitted the event \`finished\` when loaded Multilign | **\`status\`**: *any* — The finishing status |

## methods

### set()

Set the checkbox ID

**Syntax**

\`\`\`ts
set(id: string, name?: string, order: number = 1, values?: string | string[]): boolean
\`\`\`

**Parameters**

- **\`id\`**<br>
  The checkbox ID

- **\`name\`**<br>
  The checkbox name

- **\`order\`**<br>
  The checkbox order

- **\`values\`**<br>
  The checkbox values

- **\`...rest\`**<br>
  The rest options

**Return value**

True on success; ortherwise false

"
`;

exports[`snapshots should successfully render jsdoc.param: # methods

## nameOnly()

Name only

**Syntax**

\`\`\`ts
nameOnly(somebody: any): void
\`\`\`

**Parameters**

- **\`somebody\`**

## nameAndType()

Name and type

**Syntax**

\`\`\`ts
nameAndType(somebody: string): void
\`\`\`

**Parameters**

- **\`somebody\`**

## nameTypeAndDescription()

Name, type, and description

**Syntax**

\`\`\`ts
nameTypeAndDescription(somebody: string): void
\`\`\`

**Parameters**

- **\`somebody\`**<br>
  Somebody's name.

## nameTypeAndDescriptionWithHyphen()

Name, type, and description, with a hyphen before the description

**Syntax**

\`\`\`ts
nameTypeAndDescriptionWithHyphen(somebody: string): void
\`\`\`

**Parameters**

- **\`somebody\`**<br>
  Somebody's name.

## withParameterProperties()

Assign the project to an employee.

**Syntax**

\`\`\`ts
withParameterProperties(employee: Object): void
\`\`\`

**Parameters**

- **\`employee\`**<br>
  The employee who is responsible for the project.

- **\`employee.name\`**<br>
  The name of the employee.

- **\`employee.department\`**<br>
  The employee's department.

## withDestructuringParameter()

Assign the project to an employee.

**Syntax**

\`\`\`ts
withDestructuringParameter(employee: Object): void
\`\`\`

**Parameters**

- **\`employee\`**<br>
  The employee who is responsible for the project.

- **\`employee.name\`**<br>
  The name of the employee.

- **\`employee.department\`**<br>
  The employee's department.

## withPropertiesOfValuesInAnArray()

Assign the project to a list of employees.

**Syntax**

\`\`\`ts
withPropertiesOfValuesInAnArray(employees: Object[]): void
\`\`\`

**Parameters**

- **\`employees\`**<br>
  The employees who are responsible for the project.

- **\`employees[].name\`**<br>
  The name of an employee.

- **\`employees[].department\`**<br>
  The employee's department.

## withOptionalParameter()

An optional parameter (using JSDoc syntax)

**Syntax**

\`\`\`ts
withOptionalParameter(somebody?: string): void
\`\`\`

**Parameters**

- **\`somebody\`**<br>
  Somebody's name.

## withOptionalParameterAndDefaultValue()

An optional parameter and default value

**Syntax**

\`\`\`ts
withOptionalParameterAndDefaultValue(somebody: string = 'John Doe'): void
\`\`\`

**Parameters**

- **\`somebody\`**<br>
  Somebody's name.

## withMultipleType()

Allows one type OR another type (type union)

**Syntax**

\`\`\`ts
withMultipleType(somebody: string | string[] = John Doe): void
\`\`\`

**Parameters**

- **\`somebody\`**<br>
  Somebody's name, or an array of names.

## withAnyType()

Allows any type

**Syntax**

\`\`\`ts
withAnyType(somebody: any): void
\`\`\`

**Parameters**

- **\`somebody\`**<br>
  Whatever you want.

## withSpreadNotation()

Allows a parameter to be repeated.
Returns the sum of all numbers passed to the function.

**Syntax**

\`\`\`ts
withSpreadNotation(...num: number[]): void
\`\`\`

**Parameters**

- **\`num\`**<br>
  A positive or negative number.

## doSomethingAsynchronously()

Does something asynchronously and executes the callback on completion.

**Syntax**

\`\`\`ts
doSomethingAsynchronously(cb: requestCallback): void
\`\`\`

**Parameters**

- **\`cb\`**<br>
  The callback that handles the response.

 1`] = `
"# methods

## nameOnly()

Name only

**Syntax**

\`\`\`ts
nameOnly(somebody: any): void
\`\`\`

**Parameters**

- **\`somebody\`**

## nameAndType()

Name and type

**Syntax**

\`\`\`ts
nameAndType(somebody: string): void
\`\`\`

**Parameters**

- **\`somebody\`**

## nameTypeAndDescription()

Name, type, and description

**Syntax**

\`\`\`ts
nameTypeAndDescription(somebody: string): void
\`\`\`

**Parameters**

- **\`somebody\`**<br>
  Somebody's name.

## nameTypeAndDescriptionWithHyphen()

Name, type, and description, with a hyphen before the description

**Syntax**

\`\`\`ts
nameTypeAndDescriptionWithHyphen(somebody: string): void
\`\`\`

**Parameters**

- **\`somebody\`**<br>
  Somebody's name.

## withParameterProperties()

Assign the project to an employee.

**Syntax**

\`\`\`ts
withParameterProperties(employee: Object): void
\`\`\`

**Parameters**

- **\`employee\`**<br>
  The employee who is responsible for the project.

- **\`employee.name\`**<br>
  The name of the employee.

- **\`employee.department\`**<br>
  The employee's department.

## withDestructuringParameter()

Assign the project to an employee.

**Syntax**

\`\`\`ts
withDestructuringParameter(employee: Object): void
\`\`\`

**Parameters**

- **\`employee\`**<br>
  The employee who is responsible for the project.

- **\`employee.name\`**<br>
  The name of the employee.

- **\`employee.department\`**<br>
  The employee's department.

## withPropertiesOfValuesInAnArray()

Assign the project to a list of employees.

**Syntax**

\`\`\`ts
withPropertiesOfValuesInAnArray(employees: Object[]): void
\`\`\`

**Parameters**

- **\`employees\`**<br>
  The employees who are responsible for the project.

- **\`employees[].name\`**<br>
  The name of an employee.

- **\`employees[].department\`**<br>
  The employee's department.

## withOptionalParameter()

An optional parameter (using JSDoc syntax)

**Syntax**

\`\`\`ts
withOptionalParameter(somebody?: string): void
\`\`\`

**Parameters**

- **\`somebody\`**<br>
  Somebody's name.

## withOptionalParameterAndDefaultValue()

An optional parameter and default value

**Syntax**

\`\`\`ts
withOptionalParameterAndDefaultValue(somebody: string = 'John Doe'): void
\`\`\`

**Parameters**

- **\`somebody\`**<br>
  Somebody's name.

## withMultipleType()

Allows one type OR another type (type union)

**Syntax**

\`\`\`ts
withMultipleType(somebody: string | string[] = John Doe): void
\`\`\`

**Parameters**

- **\`somebody\`**<br>
  Somebody's name, or an array of names.

## withAnyType()

Allows any type

**Syntax**

\`\`\`ts
withAnyType(somebody: any): void
\`\`\`

**Parameters**

- **\`somebody\`**<br>
  Whatever you want.

## withSpreadNotation()

Allows a parameter to be repeated.
Returns the sum of all numbers passed to the function.

**Syntax**

\`\`\`ts
withSpreadNotation(...num: number[]): void
\`\`\`

**Parameters**

- **\`num\`**<br>
  A positive or negative number.

## doSomethingAsynchronously()

Does something asynchronously and executes the callback on completion.

**Syntax**

\`\`\`ts
doSomethingAsynchronously(cb: requestCallback): void
\`\`\`

**Parameters**

- **\`cb\`**<br>
  The callback that handles the response.

"
`;

exports[`snapshots should successfully render jsdoc.returns: # methods

## withType()

Returns the sum of a and b

**Syntax**

\`\`\`ts
withType(a: number, b: number): number
\`\`\`

**Parameters**

- **\`a\`**

- **\`b\`**

## withMultipleType()

Returns the sum of a and b

**Syntax**

\`\`\`ts
withMultipleType(a: number, b: number, retArr: boolean): number | Array
\`\`\`

**Parameters**

- **\`a\`**

- **\`b\`**

- **\`retArr\`**<br>
  If set to true, the function will return an array

**Return value**

Sum of a and b or an array that contains a, b and the sum of a and b.

## withPromise()

Returns the sum of a and b

**Syntax**

\`\`\`ts
withPromise(a: number, b: number): Promise
\`\`\`

**Parameters**

- **\`a\`**

- **\`b\`**

**Return value**

Promise object represents the sum of a and b

 1`] = `
"# methods

## withType()

Returns the sum of a and b

**Syntax**

\`\`\`ts
withType(a: number, b: number): number
\`\`\`

**Parameters**

- **\`a\`**

- **\`b\`**

## withMultipleType()

Returns the sum of a and b

**Syntax**

\`\`\`ts
withMultipleType(a: number, b: number, retArr: boolean): number | Array
\`\`\`

**Parameters**

- **\`a\`**

- **\`b\`**

- **\`retArr\`**<br>
  If set to true, the function will return an array

**Return value**

Sum of a and b or an array that contains a, b and the sum of a and b.

## withPromise()

Returns the sum of a and b

**Syntax**

\`\`\`ts
withPromise(a: number, b: number): Promise
\`\`\`

**Parameters**

- **\`a\`**

- **\`b\`**

**Return value**

Promise object represents the sum of a and b

"
`;

exports[`snapshots should successfully render mdn.event: # EventTarget

## methods

### addEventListener()

The EventTarget method addEventListener() sets up a function that will
be called whenever the specified event is delivered to the target.
Common targets are Element, Document, and Window, but the target may be
any object that supports events (such as XMLHttpRequest).

\`addEventListener()\` works by adding a function or an object that
implements EventListener to the list of event listeners for the
specified event type on the EventTarget on which it's called.

**Example**

\`\`\`js
const regex1 = RegExp('foo*','g');
const str1 = 'table football, foosball';
let array1;

while ((array1 = regex1.exec(str1)) !== null) {
  console.log(\`Found \${array1[0]}. Next starts at \${regex1.lastIndex}.\`);
  // expected output: "Found foo. Next starts at 9."
  // expected output: "Found foo. Next starts at 19."
}
\`\`\`

**Syntax**

\`\`\`ts
target.addEventListener(type, listener [, options]);
target.addEventListener(type, listener [, useCapture]);
target.addEventListener(type, listener [, useCapture, wantsUntrusted  ]); // Gecko/Mozilla only
\`\`\`

**Parameters**

- **\`type\`**<br>
  A case-sensitive string representing the event type to listen for.

- **\`listener\`**<br>
  The object that receives a notification (an object that implements the Event interface) when an event of the specified type occurs. This must be an object implementing the EventListener interface, or a JavaScript function. See The event listener callback for details on the callback itself.

- **\`options\`**<br>
  An options object specifies characteristics about the event listener.

- **\`useCapture\`**<br>
  A Boolean indicating whether events of this type will be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree. Events that are bubbling upward through the tree will not trigger a listener designated to use capture. Event bubbling and capturing are two ways of propagating events that occur in an element that is nested within another element, when both elements have registered a handle for that event. The event propagation mode determines the order in which elements receive the event. See DOM Level 3 Events and JavaScript Event order for a detailed explanation. If not specified, useCapture defaults to false.

- **\`wantsUntrusted\`**<br>
  A Firefox (Gecko)-specific parameter. If true, the listener receives synthetic events dispatched by web content (the default is false for browser chrome and true for regular web pages). This parameter is useful for code found in add-ons, as well as the browser itself.

**Return value**

\`undefined\`

 1`] = `
"# EventTarget

## methods

### addEventListener()

The EventTarget method addEventListener() sets up a function that will
be called whenever the specified event is delivered to the target.
Common targets are Element, Document, and Window, but the target may be
any object that supports events (such as XMLHttpRequest).

\`addEventListener()\` works by adding a function or an object that
implements EventListener to the list of event listeners for the
specified event type on the EventTarget on which it's called.

**Example**

\`\`\`js
const regex1 = RegExp('foo*','g');
const str1 = 'table football, foosball';
let array1;

while ((array1 = regex1.exec(str1)) !== null) {
  console.log(\`Found \${array1[0]}. Next starts at \${regex1.lastIndex}.\`);
  // expected output: \\"Found foo. Next starts at 9.\\"
  // expected output: \\"Found foo. Next starts at 19.\\"
}
\`\`\`

**Syntax**

\`\`\`ts
target.addEventListener(type, listener [, options]);
target.addEventListener(type, listener [, useCapture]);
target.addEventListener(type, listener [, useCapture, wantsUntrusted  ]); // Gecko/Mozilla only
\`\`\`

**Parameters**

- **\`type\`**<br>
  A case-sensitive string representing the event type to listen for.

- **\`listener\`**<br>
  The object that receives a notification (an object that implements the Event interface) when an event of the specified type occurs. This must be an object implementing the EventListener interface, or a JavaScript function. See The event listener callback for details on the callback itself.

- **\`options\`**<br>
  An options object specifies characteristics about the event listener.

- **\`useCapture\`**<br>
  A Boolean indicating whether events of this type will be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree. Events that are bubbling upward through the tree will not trigger a listener designated to use capture. Event bubbling and capturing are two ways of propagating events that occur in an element that is nested within another element, when both elements have registered a handle for that event. The event propagation mode determines the order in which elements receive the event. See DOM Level 3 Events and JavaScript Event order for a detailed explanation. If not specified, useCapture defaults to false.

- **\`wantsUntrusted\`**<br>
  A Firefox (Gecko)-specific parameter. If true, the listener receives synthetic events dispatched by web content (the default is false for browser chrome and true for regular web pages). This parameter is useful for code found in add-ons, as well as the browser itself.

**Return value**

\`undefined\`

"
`;

exports[`snapshots should successfully render mdn.regexp: # regexp

## methods

### exec()

The exec() method executes a search for a match in a specified string.
Returns a result array, or null.

JavaScript RegExp objects are stateful when they have the global or sticky flags set (e.g. /foo/g or /foo/y). They store a lastIndex from the previous match. Using this internally, exec() can be used to iterate over multiple matches in a string of text (with capture groups), as opposed to getting just the matching strings with String.prototype.match().

A newer function has been proposed to simplify matching multiple parts of a string (with capture groups): String.prototype.matchAll().

If you are executing a match simply to find true or false, use RegExp.prototype.test() method or String.prototype.search() instead.

**Example**
\`\`\`js
const regex1 = RegExp('foo*','g');
const str1 = 'table football, foosball';
let array1;

while ((array1 = regex1.exec(str1)) !== null) {
  console.log(\`Found \${array1[0]}. Next starts at \${regex1.lastIndex}.\`);
  // expected output: "Found foo. Next starts at 9."
  // expected output: "Found foo. Next starts at 19."
}
\`\`\`

**Syntax**

\`\`\`ts
regexObj.exec(str: string): any[]
\`\`\`

**Parameters**

- **\`str\`**<br>
  The string against which to match the regular expression.

**Return value**

If the match succeeds, the exec() method returns an array (with extra properties index and input; see below) and updates the lastIndex property of the regular expression object. The returned array has the matched text as the first item, and then one item for each parenthetical capture group of the matched text.<br><br>If the match fails, the exec() method returns null, and sets lastIndex to 0.

 1`] = `
"# regexp

## methods

### exec()

The exec() method executes a search for a match in a specified string.
Returns a result array, or null.

JavaScript RegExp objects are stateful when they have the global or sticky flags set (e.g. /foo/g or /foo/y). They store a lastIndex from the previous match. Using this internally, exec() can be used to iterate over multiple matches in a string of text (with capture groups), as opposed to getting just the matching strings with String.prototype.match().

A newer function has been proposed to simplify matching multiple parts of a string (with capture groups): String.prototype.matchAll().

If you are executing a match simply to find true or false, use RegExp.prototype.test() method or String.prototype.search() instead.

**Example**
\`\`\`js
const regex1 = RegExp('foo*','g');
const str1 = 'table football, foosball';
let array1;

while ((array1 = regex1.exec(str1)) !== null) {
  console.log(\`Found \${array1[0]}. Next starts at \${regex1.lastIndex}.\`);
  // expected output: \\"Found foo. Next starts at 9.\\"
  // expected output: \\"Found foo. Next starts at 19.\\"
}
\`\`\`

**Syntax**

\`\`\`ts
regexObj.exec(str: string): any[]
\`\`\`

**Parameters**

- **\`str\`**<br>
  The string against which to match the regular expression.

**Return value**

If the match succeeds, the exec() method returns an array (with extra properties index and input; see below) and updates the lastIndex property of the regular expression object. The returned array has the matched text as the first item, and then one item for each parenthetical capture group of the matched text.<br><br>If the match fails, the exec() method returns null, and sets lastIndex to 0.

"
`;

exports[`snapshots should successfully render mdn.string: # string

## methods

### String.prototype.match()

The \`match()\` method retrieves the result of matching a string against a
regular expression.

**Example**
\`\`\`js
const paragraph = 'The quick brown fox jumps over the lazy dog. It barked.';
const regex = /[A-Z]/g;
const found = paragraph.match(regex);

console.log(found);
// expected output: Array ["T", "I"]
\`\`\`

**Syntax**

\`\`\`ts
str.match(regexp)
\`\`\`

**Parameters**

- **\`regexp\`**<br>
  A regular expression object.

**Return value**

An Array whose contents depend on the presence or absence of the global (g) flag, or null if no matches are found.

### String.prototype.replace()

The \`replace()\` method returns a new string with some or all matches of
a \`pattern\` replaced by a \`replacement\`. The \`pattern\` can be a string
or a RegExp, and the \`replacement\` can be a string or a function to be
called for each match. If \`pattern\` is a string, only the first
occurrence will be replaced.

The original string is left unchanged.

**Example**
\`\`\`js
const p = 'The quick brown fox jumps over the lazy dog. If the dog reacted, was it really lazy?';
const regex = /dog/gi;

console.log(p.replace(regex, 'ferret'));
// expected output: "The quick brown fox jumps over the lazy ferret. If the ferret reacted, was it really lazy?"

console.log(p.replace('dog', 'monkey'));
// expected output: "The quick brown fox jumps over the lazy monkey. If the dog reacted, was it really lazy?"
\`\`\`

**Syntax**

\`\`\`ts
const newStr = str.replace(regexp|substr, newSubstr|function)
\`\`\`

**Parameters**

- **\`regexp\`**<br>
  A RegExp object or literal. The match or matches are replaced with newSubstr or the value returned by the specified function.

- **\`substr\`**<br>
  A String that is to be replaced by newSubstr. It is treated as a literal string and is not interpreted as a regular expression. Only the first occurrence will be replaced.

- **\`newSubstr\`**<br>
  The String that replaces the substring specified by the specified regexp or substr parameter. A number of special replacement patterns are supported; see the "Specifying a string as a parameter" section below.

- **\`function\`**<br>
  A function to be invoked to create the new substring to be used to replace the matches to the given regexp or substr. The arguments supplied to this function are described in the "Specifying a function as a parameter" section below.

**Return value**

A new string, with some or all matches of a pattern replaced by a replacement.

 1`] = `
"# string

## methods

### String.prototype.match()

The \`match()\` method retrieves the result of matching a string against a
regular expression.

**Example**
\`\`\`js
const paragraph = 'The quick brown fox jumps over the lazy dog. It barked.';
const regex = /[A-Z]/g;
const found = paragraph.match(regex);

console.log(found);
// expected output: Array [\\"T\\", \\"I\\"]
\`\`\`

**Syntax**

\`\`\`ts
str.match(regexp)
\`\`\`

**Parameters**

- **\`regexp\`**<br>
  A regular expression object.

**Return value**

An Array whose contents depend on the presence or absence of the global (g) flag, or null if no matches are found.

### String.prototype.replace()

The \`replace()\` method returns a new string with some or all matches of
a \`pattern\` replaced by a \`replacement\`. The \`pattern\` can be a string
or a RegExp, and the \`replacement\` can be a string or a function to be
called for each match. If \`pattern\` is a string, only the first
occurrence will be replaced.

The original string is left unchanged.

**Example**
\`\`\`js
const p = 'The quick brown fox jumps over the lazy dog. If the dog reacted, was it really lazy?';
const regex = /dog/gi;

console.log(p.replace(regex, 'ferret'));
// expected output: \\"The quick brown fox jumps over the lazy ferret. If the ferret reacted, was it really lazy?\\"

console.log(p.replace('dog', 'monkey'));
// expected output: \\"The quick brown fox jumps over the lazy monkey. If the dog reacted, was it really lazy?\\"
\`\`\`

**Syntax**

\`\`\`ts
const newStr = str.replace(regexp|substr, newSubstr|function)
\`\`\`

**Parameters**

- **\`regexp\`**<br>
  A RegExp object or literal. The match or matches are replaced with newSubstr or the value returned by the specified function.

- **\`substr\`**<br>
  A String that is to be replaced by newSubstr. It is treated as a literal string and is not interpreted as a regular expression. Only the first occurrence will be replaced.

- **\`newSubstr\`**<br>
  The String that replaces the substring specified by the specified regexp or substr parameter. A number of special replacement patterns are supported; see the \\"Specifying a string as a parameter\\" section below.

- **\`function\`**<br>
  A function to be invoked to create the new substring to be used to replace the matches to the given regexp or substr. The arguments supplied to this function are described in the \\"Specifying a function as a parameter\\" section below.

**Return value**

A new string, with some or all matches of a pattern replaced by a replacement.

"
`;
